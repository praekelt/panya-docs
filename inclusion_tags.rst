.. _inclusion-tags:

Inclusion Tags
==============

This document describes inclusion tags provided by the standard set of Panya apps. An inclusion tag returns HTML structures for inclusion within templates. For tags that take some input and returns a modified result see :ref:`template tags <template-tags>`. 

.. contents:: Contents
    :depth: 5

.. _inclusion-tags-panya:

Panya Inclusion Tags
--------------------

The following tags are contained in ``panya.templatetags.panya_inclusion_tags``. 

To activate them use ``{% load panya_inclusion_tags %}`` in your template.

.. _inclusion-tags-panya-pager:

pager
+++++

Outputs simple paging controls for a provided `page <http://docs.djangoproject.com/en/dev/topics/pagination/#page-objects>`_ object. See Django's `pagination docs <http://docs.djangoproject.com/en/dev/topics/pagination/>`_ for more info. 

**Sample usage**::

    {% pager page_obj %}

The resulting HTML is generated by the template located at ``panya/inclusion_tags/pager.html``. Override that template to provide your own custom HTML.

.. _inclusion-tags-panya-render_object:

render_object
+++++++++++++

Outputs a template based on provided object and type. 

**Sample usage**::

    {% render_object object 'listing' %}

The template name to use for output is resolved as follows:

#. Construct template name from the object's app-label, model and provided type. For instance with an object of model ``Book`` defined in an app labeled ``library``, with type provided as ``listing``, a template name of ``library/inclusion_tags/book_listing.html`` would be constructed. The pattern is as follows: ``<object app-label>/inclusion_tags/<object model>_<type>.html``.
#. If a template with name constructed in 1. is not found, fall back to a generic modelbase type template constructed using the pattern: ``panya/inclusion_tags/modelbase_<type>.html``.
#. If a template with name constructed in 2. is not found, the tag outputs the empty string.

Once an appropriate template has been found the template is passed the object in a template context variable called ``object`` and its output returned.

**Consider the following example:**

A model has been defined as follows within the ``library`` app::

    class Book(model.Model):
        author = models.CharField(max_length=128)

A view has been defined that passes a collection of books to a template in a template context variable called ``object_list``.

View code::

    def books(context):
        objects = Books.objects.all()
        return render_to_response('books.html', {'object_list': objects}) 

Template code for ``books.html``::
    
    {% load panya_inclusion_tags %}

    {% block content %}
        {% for object in object_list %}
            {% render_object object 'listing' %}
        {% endfor %}
    {% endblock %}

Another seperate template named ``library/inclusion_tags/book_listing.html`` has been defined as follows::

    {{ object.author }}

When the ``render_object`` tag is encountered in ``books.html``, it constructs a template name of ``library/inclusion_tags/book_listing.html`` and its resulting output is included. So in this case the result would be a list of book authors.

This tag enables one to collect objects of various models and output model specific templates without having to include additional template logic.  
